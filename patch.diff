From 2a2523245afbd422924f74abe09f43ccb1464665 Mon Sep 17 00:00:00 2001
From: Loic LE PENN <loic.lepenn@orange.com>
Date: Fri, 14 Apr 2017 10:59:30 +0200
Subject: [PATCH] Correct prepare table method

---
 Sources/Product.swift | 42 ++++++++++++++++--------------------------
 Sources/Stock.swift   | 33 +++++++++++++++++++++------------
 Sources/Store.swift   | 42 +++++++++++++++++++-----------------------
 Sources/main.swift    |  8 +++-----
 4 files changed, 59 insertions(+), 66 deletions(-)

diff --git a/Sources/Product.swift b/Sources/Product.swift
index a7d888a..cb8cc94 100644
--- a/Sources/Product.swift
+++ b/Sources/Product.swift
@@ -19,34 +19,24 @@ class Product : Table {
     
     let refProduct = Column("refProduct")
     let name = Column("name")
-    let currency = Column("currency")
     let picture = Column("picture")
-    let priceHT = Column("priceWT")
     let creationDate = Column("creationDate")
-    let vat = Column("vat")
     
-//    static func prepare(connection:PostgreSQLConnection){
-//        
-//     var query:CreateTable = CreateTable(tableName: "products")
-//         query.addColumn("refProduct", type: .varchar(number: 255), notNull: true, primaryKey: true)
-//         query.addColumn("picture", type: .varchar(number: 255))
-//         query.addColumn("name", type: .varchar(number: 255))
-//         query.addColumn("vat", type: .decimal)
-//         query.addColumn("currency", type: .varchar(number: 255))
-//         query.addColumn("priceWT", type: .decimal)
-//         query.addColumn("creationDate", type: .timestamp)
-//        
-//        do {
-//            try db.connection.executeQuery(query: query) { result in
-//                if let error = result?.asError {
-//                    Log.error(String(describing: error))
-//                } else {
-//                    Log.info("Table prepare with Success")
-//                }
-//            }
-//        } catch {
-//            Log.error(String(describing: error))
-//        }
-//    }
+    static func prepare(){
+        
+     var query:CreateTable = CreateTable(tableName: "products")
+         query.addColumn("refProduct", type: .varchar(number: 255), notNull: true, primaryKey: true)
+         query.addColumn("picture", type: .varchar(number: 255))
+         query.addColumn("name", type: .varchar(number: 255))
+         query.addColumn("creationDate", type: .timestamp)
+        
+        db.executeQuery(query: query) { result in
+            if let error = result.asError {
+                Log.error(String(describing: error))
+            } else {
+                Log.debug("Table prepare with success")
+            }
+        }
+    }
 
 }
diff --git a/Sources/Stock.swift b/Sources/Stock.swift
index ecf1872..c59c0c9 100644
--- a/Sources/Stock.swift
+++ b/Sources/Stock.swift
@@ -21,18 +21,27 @@ class Stock : Table {
     let creationDate = Column("creationDate")
     let lastUpdate = Column("lastUpdate")
     let status = Column("status")
+    let priceHT = Column("priceHT")
+    let vat = Column("vat")
     
-    
-//    static func prepare(connection:PostgreSQLConnection){
-//        let query : String = "CREATE TABLE IF NOT EXISTS stock ( refStore varchar(255) NOT NULL REFERENCES stores, refProduct varchar(255) NOT NULL REFERENCES products, quantity integer, creationDate timestamp, lastUpdate timestamp, status varchar(45), PRIMARY KEY (refStore,refProduct) );"
-//        
-//       db.connection.executeQuery(query: query) { result in
-//            if let error = result?.asError {
-//                Log.error(String(describing: error))
-//            } else {
-//                Log.info("Table prepare with Success")
-//            }
-//        }
-//    }
+    static func prepare(){
+        let query : String = "CREATE TABLE IF NOT EXISTS stock ( refStore varchar(255) NOT NULL REFERENCES stores,"
+                           + "refProduct varchar(255) NOT NULL REFERENCES products,"
+                           + "quantity integer,"
+                           + "creationDate timestamp,"
+                           + "lastUpdate timestamp,"
+                           + "status varchar(45),"
+                           + "priceHT decimal,"
+                           + "vat decimal,"
+                           + "PRIMARY KEY (refStore,refProduct) );"
+        
+       db.executeQuery(query: query) { result in
+            if let error = result.asError {
+                Log.error(String(describing: error))
+            } else {
+                Log.info("Table prepare with Success")
+            }
+        }
+    }
 }
 
diff --git a/Sources/Store.swift b/Sources/Store.swift
index 3498648..eef4346 100644
--- a/Sources/Store.swift
+++ b/Sources/Store.swift
@@ -21,31 +21,27 @@ class Store : Table {
     let picture = Column("picture")
     let name = Column("name")
     let vat = Column("vat")
+    let currency = Column("currency")
     let merchantKey = Column("merchantKey")
     
-//    static func prepare(connection:PostgreSQLConnection){
-//        
-//        var query:CreateTable = CreateTable(tableName: "stores")
-//            query.addColumn("refStore", type: .varchar(number: 255), notNull: true, primaryKey: true)
-//            query.addColumn("picture", type: .varchar(number: 255))
-//            query.addColumn("name", type: .varchar(number: 255))
-//            query.addColumn("vat", type: .decimal)
-//            query.addColumn("merchantKey", type: .varchar(number: 255))
-//       
-//        do {
-//            
-//            try db.connection.executeQuery(query: query) { result in
-//                if let error = result?.asError {
-//                    Log.error(String(describing: error))
-//                }
-//                else {
-//                    Log.info("Table prepare with Success")
-//                }
-//            }
-//        } catch {
-//             Log.error(String(describing: error))
-//        }
-//    }
+    static func prepare(){
+        
+        var query:CreateTable = CreateTable(tableName: "stores")
+            query.addColumn("refStore", type: .varchar(number: 255), notNull: true, primaryKey: true)
+            query.addColumn("picture", type: .varchar(number: 255))
+            query.addColumn("name", type: .varchar(number: 255))
+            query.addColumn("vat", type: .decimal)
+            query.addColumn("currency", type: .varchar(number:255))
+            query.addColumn("merchantKey", type: .varchar(number: 255))
+            
+            db.executeQuery(query: query) { result in
+                if let error = result.asError {
+                    Log.error(String(describing: error))
+                } else {
+                    Log.info("Table prepare with Success")
+                }
+            }
+    }
     
 }
 
diff --git a/Sources/main.swift b/Sources/main.swift
index a19ee89..0a777b6 100644
--- a/Sources/main.swift
+++ b/Sources/main.swift
@@ -1,8 +1,6 @@
 import Kitura
 import HeliumLogger
 import LoggerAPI
-import SwiftKuery
-import SwiftKueryPostgreSQL
 import Foundation
 
 // First set Logger to
@@ -13,9 +11,9 @@ Log.logger = logger
 // connect to database
 let db = try Database.environmentDatabase()
 
-//Store.prepare(connection: db.connection)
-//Product.prepare(connection: db.connection)
-//Stock.prepare(connection: db.connection)
+Store.prepare()
+Product.prepare()
+Stock.prepare()
 
 let router = routingCenter(database: db)
 
-- 
2.8.1

